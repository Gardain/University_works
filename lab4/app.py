import logging
import requests
import folium
import os
import json
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"
NASA_API_KEY = "–í–ê–®_–ö–õ–Æ–ß"
USER_DATA_FILE = "user_data.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r") as file:
            return json.load(file)
    return {}


def save_user_data(data):
    with open(USER_DATA_FILE, "w") as file:
        json.dump(data, file, indent=4)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_data = load_user_data()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SaveNumberStates(StatesGroup):
    waiting_for_number = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–æ—Ç üöÄ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/iss_location - –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ú–ö–°\n"
        "/people_in_space - –ö—Ç–æ —Å–µ–π—á–∞—Å –≤ –∫–æ—Å–º–æ—Å–µ?\n"
        "/nasa_apod - –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–Ω—è –æ—Ç NASA\n"
        "/random_fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ\n"
        "/save_number - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–æ\n"
        "/get_number - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ"
    )


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∏—Å–ª–∞ (–Ω–∞—á–∞–ª–æ)
async def save_number_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:")
    await state.set_state(SaveNumberStates.waiting_for_number)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∏—Å–ª–∞ (–≤–≤–æ–¥ —á–∏—Å–ª–∞)
async def handle_number(message: Message, state: FSMContext):
    try:
        number = int(message.text)
        user_id = str(message.from_user.id)
        user_data[user_id] = number
        save_user_data(user_data)
        await message.answer(f"–í–∞—à–µ —á–∏—Å–ª–æ {number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
async def get_number_command(message: Message):
    user_id = str(message.from_user.id)
    if user_id in user_data:
        await message.answer(f"–í–∞—à–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {user_data[user_id]}")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /save_number –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


# –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ú–ö–°
async def iss_location(message: Message):
    url = "http://api.open-notify.org/iss-now.json"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        latitude = float(data["iss_position"]["latitude"])
        longitude = float(data["iss_position"]["longitude"])

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        iss_map = folium.Map(location=[latitude, longitude], zoom_start=4)
        folium.Marker([latitude, longitude], popup="–ú–ö–° –∑–¥–µ—Å—å!").add_to(iss_map)
        map_file = "iss_location.html"
        iss_map.save(map_file)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(FSInputFile(map_file))
        os.remove(map_file)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ú–ö–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ö—Ç–æ —Å–µ–π—á–∞—Å –≤ –∫–æ—Å–º–æ—Å–µ
async def people_in_space(message: Message):
    url = "http://api.open-notify.org/astros.json"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        people = "\n".join(
            f"- {person['name']} ({person['craft']})" for person in data["people"]
        )
        await message.answer(f"–°–µ–π—á–∞—Å –≤ –∫–æ—Å–º–æ—Å–µ {data['number']} —á–µ–ª–æ–≤–µ–∫(–∞):\n{people}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª—é–¥—è—Ö –≤ –∫–æ—Å–º–æ—Å–µ.")


# –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–Ω—è –æ—Ç NASA
async def nasa_apod(message: Message):
    url = f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        title = data["title"]
        explanation = data["explanation"]
        image_url = data["url"]
        await message.answer_photo(photo=image_url, caption=f"{title}\n\n{explanation}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–Ω—è –æ—Ç NASA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ
async def random_fact(message: Message):
    facts = [
        "–í–µ–Ω–µ—Ä–∞ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.",
        "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—ã–ª—å –µ–∂–µ–≥–æ–¥–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –ó–µ–º–ª—é –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 40 000 —Ç–æ–Ω–Ω.",
        "–°–æ–ª–Ω—Ü–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 99% –º–∞—Å—Å—ã –Ω–∞—à–µ–π –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.",
        "–ù–∞ –õ—É–Ω–µ –Ω–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã, –ø–æ—ç—Ç–æ–º—É —Ç–∞–º –Ω–µ—Ç –∑–≤—É–∫–æ–≤."
    ]
    from random import choice
    await message.answer(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: {choice(facts)}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(start_command, Command("start"))
    dp.message.register(save_number_command, Command("save_number"))
    dp.message.register(handle_number, SaveNumberStates.waiting_for_number)  # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.message.register(get_number_command, Command("get_number"))
    dp.message.register(iss_location, Command("iss_location"))
    dp.message.register(people_in_space, Command("people_in_space"))
    dp.message.register(nasa_apod, Command("nasa_apod"))
    dp.message.register(random_fact, Command("random_fact"))

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
